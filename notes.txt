basic fundamental
java code => compiler => byte code => jvm.
jvm will only execute 1 file that contain : public static void main(String a[]), and the rest will be executed as in that file.
name of class cant be prefix with number, must be same with name of file and must be has extension .java
to compile program :
1. terminal => javac name_file.java
2. using debug in the top
variable :
1. String
2. int

Data type :
primitive =>
1. integer => byte (1 bytes), short (2 bytes), int (4 bytes), long (8 bytes)
2. float => float (4 bytes), double (8 bytes)
3. character => char (2 bytes)
4. boolean => true or false

1 bytes maximum is 128;

conversion and casting
conversion  => change type of data directly
casting => change type of data with describe the type of data
type promotion => change type of data in the result of operation when the result cant match with the type of data

operational operator
< , > , == , != , <= , >=

logical operator
and => &&
or => ||
not => !

conditional operator
if - else
if - else if - else
ternary operator => only can be used for get the result, not doing something (assign data)
switch

looping
loop - while => execute code if the condition is true
do while => execute code minimum once when the condition is false
for

======================
object
object have properties and behaviors (what it can do)
object = pen
properties = color, merk
behaviors = write

to call the method in other class, we must declare the class first as object in the class which is called

======================
array
int arrVal[] = {5,6,7};
multi dimensional array
int multiArr[][]= new int [3][4]
jaged array => array which has no same length between array one and other
array of objects => array that contain object value

======================
String
Basically, String is an object that consume hype memory. When we insert value to String variable, the value can't be changed. ACtually, when we manipulated the value, java only change the address memory that refers for the value in the hype memory.
mutable string => can change the string
immutable string => can't change the string
String buffer & String builder => create mutable string, and both of them can be manipulated with so many methods 

======================
static
share by all of every object in the class, once we change the value, all of objects which are use that variable will affect with that
static block, will only called once although the object is used so many times
if we use static class, we can't use non static variable in.
in the main class, we use static because we don't need call the name of class to run main in the first time we run the program

======================
encapsulation
private => only can be accessed in the same class
to access the var private, we can create method to collect the var and use the method in other class. The method should be has prefix get (getter)
to assign value to the var private, we can create method to assign the var and use the method in other class. The method should be has prefix set (setter)

=======================
this => it refers to the object which is used

=======================
constructor => when we creating an object, the default value will be null (string) & 0 (int). We can change it using constructor
constructor name must be same with class name.
constructor never refers anything
constructor will be always called when we create an object

================
Super & this
super class can be called by using extends. When we crete an object, the super class in the object will be called automatically.
every constructor has super() => call the constructor for the super class.
every class will extends Object class
this => will be call default method in the class

=================
Name Convention
class and interface =>Capitalize. Calc, Runable
variable and method => CamelCase. marks, show()
constats => All Capitalize. PIE, BRAND

=================
anonymous object
the object that only can be used once

=================
inheritance
copy the feature from the super class
to get inheritance from other class, we can use extends [class name].
class after extends is super class
to get inheritance from multiple classes, we can extends step by step. It means we extends class in the upper class, and then extends that class
Multiple inheritance will not work in java since it ambiguity

=================
method overiding
the method in child class will be the first priority. If 2 classes have same method, the method that will be executed is the method in the child class, not in the extends class

================
Packages = folder
Placing the file into seperated folder
declare package [name_folder]; in the top of codes
when we want to use that file, we must import it. import [name_folder].[name_class];
when we want to import all of classes in the package, we can use star => import [name_folder].*;
star means => import all of files, not folder.

================
access modifiers
public => can be accessed anywhere
when we import file from different package, and want to access method that has no public, it will not possible to do
private => it can only be used in the same class
default => it can be accessed in the same class, same package subclass, and same package non-subclass
protected => it can be user in same class, same package subclass, same package non subclass, different package subclass
tips => one file one class, class is public, variable is private, method is public, don't use default

=================
Polymorphism => The situation change the behavior
1. compile time Polymorphism => overloading 
2. run time Polymorphism => overiding

dynamic method dispatch => the method that will be called is different based on the object that is initiated

=================
final
final in variable => the value will be constant/cant change the value
final in method =>  the class can't be overiding
final in class => the class cant be extended

=================
object class => every class in java, ACtually extends the object class => every time we print obj, it will call toString method in the object class that return getclass().getName() + hexadecimal.

=================
Downcasting & Upcasting
Typecasting => change the type of data
double a = 2,7;
int b = (int) a; => this is type casting

Upcasting => when we want to casting a class in the super class
A obj = (A) new B();

Downcasting => when we want to casting to child class
A obj = new B();
B obj1 = (B) obj;

==================
wrapper class => for every primitive type of variable, we are going have a class for it
autoboxing => store the primitive value to the object
auto-unboxing => take out the value from the object

==================
abstract keyword
abstract class make the sub class which extend the class must has the method with the type of abstract.
abstract method can only be declared in the abstract class
abstract class possible to not has abstract method.
abstract class cant be called in the main class/can't make the object from abstract class
if we dont want to implement all of the abstract methods in the main class, we must make the class to be abstract also

=====================
Inner class => class in the class
to create object from inner class, we must declare object from outter class, or we must using static for the inner class 

=====================
anonymous class => create class without name, only declare the method. It's similar enough with anonymous function to use it.

=======================
abstract and anonymous inner class => combine three of them into one implementation
with it, we can possible to create object from abstract class

=======================
interface => this is like a class, but by default all the methods in is abstract.
interface show us what method we must be implement in the class.
to use the interface, use implements
all variable in the interface by default is final and static
we can implement multiple interfaces
inheritance in interface is possible, with using extend

summary :
class -> class = extend
interface -> class = implements
interface -> interface = extend

========================
Enum => name of constant
enum possible to be compare using if and switch
enum can't be extended in other classes

========================
anotation => has prefix @
@override =etc> comparing


========================
functional interface new => make sure the interface only has method
add anotation @functionalInterface

========================
Lambda expression => declare funtional interface with shorter code
lambda only work with functional interface

=========================
type interface
1. normal => has multiple methods
2. functional interface/SAM (Single abstract method) => has one method
3. marker => create blank interface. It will be used for deserialitation/store value to hardware memory

==========================
Exception
*Error
1. Compile time error => the error happen in the compile time, like typo in syntaks, etc
2. logical error/bug => the output is not like our prediction
3. runtime error => the code just stop working => exception handling

handling exception
normal statements
critical statements

try{
    j=18/i;
} catch(exception e){
    System.out.println(something);
}
=>
hi java, try to run the code, and if there is error catch the exception.
catch block only executed when there is error

try multiple catch
if there is exception that is executed in the first row, it will jump directly to the catch. So the next exception will be not executed
catch has some type => aritmathicException, arrayIndexoutofboundexception, etc.
the default exception is Catch(Exception e) to catch the rest of excpetion.
default exception can't be put at the top of other type of exception.

hirarchy exception
object class => Throwable =>
1. Exception =>
1.1 runtime exception =>
1.1.1 aritmathicException
1.1.2. arrayIndexoutofboundexception
1.1.3. etc
2. sequre exception
2.1 Error =>
2.1.1. Thread error
2.1.2. IO error

Exception throw keyword
we can use throw to send the exception and it will can be catch. 
Throw also can be put the parameter

Custom Exceptions
create custom_excpetion which extends exception class.
and use super to give params

Ducking exceptions using throws => make the exception being handled by other class